"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeHZ = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function dedup_sort(str) {
    const chArray = [];
    const set = new Set();
    let dupCounter = 0;
    for (let c of str) {
        if (set.has(c)) {
            dupCounter++;
            continue;
        }
        chArray.push(c);
        set.add(c);
    }
    console.log("  ==> dup chars:", dupCounter);
    return chArray.sort().join("");
}
function dedup_sort2(refStr, str) {
    const chArray = [];
    const set = new Set();
    for (let ch of refStr)
        set.add(ch);
    for (let c of str) {
        if (set.has(c))
            continue;
        chArray.push(c);
        set.add(c);
    }
    return chArray.sort().join("");
}
function makeHZ(fk) {
    let L1Text = "";
    let L2Text = "";
    L1Text = fs_1.default.readFileSync(path_1.default.join(__dirname, "./L1.txt"), "utf8").replace(/\s/g, "");
    L2Text = fs_1.default.readFileSync(path_1.default.join(__dirname, "./L2.txt"), "utf8").replace(/\s/g, "");
    const L1 = dedup_sort(L1Text);
    console.log("  ==> L1: org=", L1Text.length, "dedup=", L1.length);
    const L2 = dedup_sort2(L1, L2Text);
    console.log("  ==> L2: org=", L2Text.length, "dedup=", L2.length);
    const allFontsChars = dedup_sort(String.fromCharCode(...fk.characterSet.sort()));
    const L3 = dedup_sort2(L1Text + L2Text, allFontsChars).replace(/[\x00-\x1f]/g, "");
    console.log("  ==> L3:", L3.length);
    console.log("  ==> ALL=", allFontsChars.length);
    return { L1, L2, L3 };
}
exports.makeHZ = makeHZ;
